<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright(c) 2016-2017 IBM, Red Hat, and others. ~ ~ Licensed under 
	the Apache License, Version 2.0 (the "License"); ~ you may not use this file 
	except in compliance with the License. ~ You may obtain a copy of the License 
	at ~ http://www.apache.org/licenses/LICENSE-2.0 ~ Unless required by applicable 
	law or agreed to in writing, software ~ distributed under the License is 
	distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY 
	KIND, either express or implied. ~ See the License for the specific language 
	governing permissions and ~ limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>microprofile-conference</artifactId>
		<groupId>io.microprofile.showcase</groupId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>microservice-schedule</artifactId>
	<name>Conference :: Schedule</name>
	<packaging>war</packaging>

	<properties>
		<version.fabric8-maven-plugin>3.5.28</version.fabric8-maven-plugin>
	</properties>



	<dependencies>
		<dependency>
			<groupId>io.microprofile.showcase</groupId>
			<artifactId>demo-bootstrap</artifactId>
			<version>${project.version}</version>
		</dependency>



	</dependencies>

	<profiles>
		<profile>
			<id>wildfly</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>microprofile-health</artifactId>
				</dependency>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>microprofile-jwt</artifactId>
				</dependency>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>microprofile-config</artifactId>
				</dependency>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>microprofile-metrics</artifactId>
				</dependency>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>microprofile-fault-tolerance</artifactId>
				</dependency>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>arquillian</artifactId>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>jsonp</artifactId>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.resteasy</groupId>
					<artifactId>resteasy-client</artifactId>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.resteasy</groupId>
					<artifactId>jaxrs-api</artifactId>
					<version>3.0.12.Final</version>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.jboss.resteasy</groupId>
					<artifactId>resteasy-jaxb-provider</artifactId>
					<version>3.0.14.Final</version>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.jboss.resteasy</groupId>
					<artifactId>resteasy-jackson2-provider</artifactId>
					<version>3.0.14.Final</version>
					<scope>test</scope>
					<exclusions>
						<exclusion>
							<groupId>com.fasterxml.jackson.core</groupId>
							<artifactId>jackson-core</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.jboss.shrinkwrap.resolver</groupId>
					<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
					<scope>test</scope>
				</dependency>

			</dependencies>
			<build>
				<finalName>${project.artifactId}</finalName>

				<plugins>
					<plugin>
						<groupId>org.wildfly.swarm</groupId>
						<artifactId>wildfly-swarm-plugin</artifactId>
						<configuration>
							<useUberJar>true</useUberJar>
						</configuration>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
						<version>${version.fabric8-maven-plugin}</version>
						<executions>
							<execution>
								<id>fmp</id>
								<goals>
									<goal>resource</goal>
									<goal>helm</goal>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<generator>
								<includes>
									<include>wildfly-swarm</include>
								</includes>
							</generator>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>arquillian-glassfish-embedded</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<arquillian.launch>arquillian-glassfish-embedded</arquillian.launch>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-glassfish-embedded-3.1</artifactId>
				</dependency>
				<dependency>
					<groupId>fish.payara.extras</groupId>
					<artifactId>payara-embedded-all</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>liberty</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.0.1</version>
						<executions>
							<execution>
								<id>copy-app-to-liberty</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<outputDirectory>${project.build.directory}/liberty/wlp/usr/servers/scheduleServer/apps</outputDirectory>
							<overwrite>true</overwrite>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>${warfile.name}.war</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</plugin>
					<plugin>
						<groupId>net.wasdev.wlp.maven.plugins</groupId>
						<artifactId>liberty-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>create-liberty-server</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>create-server</goal>
								</goals>
							</execution>
							<execution>
								<id>package-server</id>
								<phase>package</phase>
								<goals>
									<goal>package-server</goal>
								</goals>
								<configuration>
									<packageFile>${project.build.directory}/${project.artifactId}${qualifier.jar}.jar</packageFile>
									<include>runnable</include>
								</configuration>
							</execution>
						</executions>
						<configuration>
							<serverName>scheduleServer</serverName>
							<appArchive>${project.build.directory}/${warfile.name}.war</appArchive>
							<configFile>${basedir}/src/main/liberty/config/server.xml</configFile>
							<assemblyInstallDirectory>${project.build.directory}</assemblyInstallDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>payara</id>
			<build>
				<finalName>${project.artifactId}</finalName>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>fish.payara.extras</groupId>
								<artifactId>payara-microprofile</artifactId>
								<version>1.0</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>payara-uber-jar</id>
								<phase>package</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>fish.payara.micro.PayaraMicro</mainClass>
									<arguments>
										<argument>--noCluster</argument>
										<argument>--autoBindHttp</argument>
										<argument>--logo</argument>
										<argument>--deploy</argument>
										<argument>${basedir}/target/${warfile.name}.war</argument>
										<argument>--outputUberJar</argument>
										<argument>${basedir}/target/${project.artifactId}.jar</argument>
									</arguments>
									<includeProjectDependencies>false</includeProjectDependencies>
									<includePluginDependencies>true</includePluginDependencies>
									<executableDependency>
										<groupId>fish.payara.extras</groupId>
										<artifactId>payara-microprofile</artifactId>
									</executableDependency>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
						<version>${version.fabric8-maven-plugin}</version>
						<executions>
							<execution>
								<id>fmp</id>
								<goals>
									<goal>resource</goal>
									<goal>helm</goal>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<mode>kubernetes</mode>
							<images>
								<image>
									<name>showcase/${project.artifactId}:${project.version}</name>
									<build>
										<from>openjdk:latest</from>
										<assembly>
											<inline>
												<files>
													<file>
														<source>target/${project.artifactId}.jar</source>
													</file>
												</files>
											</inline>
											<basedir>/deployments</basedir>
										</assembly>
										<cmd>java -jar deployments/${project.artifactId}.jar</cmd>
									</build>
								</image>
							</images>
							<enricher>
								<config>
									<fmp-service>
										<name>${project.artifactId}</name>
										<port>8080:8080</port>
									</fmp-service>
								</config>
							</enricher>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
